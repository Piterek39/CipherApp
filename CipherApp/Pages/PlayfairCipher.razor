@page "/playfair-cipher"
@using System.Text;

<h3>Szyfr Playfaira</h3>

<div class="mb-3">
    <label for="keyInput" class="form-label">Klucz:</label>
    <input type="text" class="form-control" id="keyInput" @bind="key" />
</div>

<div class="mb-3">
    <label for="textInput" class="form-label">Tekst:</label>
    <textarea class="form-control" id="textInput" @bind="text"></textarea>
</div>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="() => ProcessText(true)">Szyfruj</button>
    <button class="btn btn-secondary" @onclick="() => ProcessText(false)">Deszyfruj</button>
</div>

@if (!string.IsNullOrEmpty(result))
{
    <div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Wynik:</h4>
        <p>@result</p>
    </div>
}

@code {
    private string key = "";
    private string text = "";
    private string result = "";
    public string Encrypt(string plaintext)
    {
        return ProcessText(plaintext, true);
    }

    public string Decrypt(string ciphertext)
    {
        return ProcessText(ciphertext, false);
    }
    private char[,] matrix = new char[6, 6];

    private void ProcessText(bool encrypting)
    {
        GenerateMatrix(key + "aąbcćdeęfghijklłmnńoóprsśtuvwxyzźż");
        result = encrypting ? Encrypt(text) : Decrypt(text);
    }

    private void GenerateMatrix(string key)
    {
        var characterSet = new HashSet<char>();
        int index = 0;

        foreach (char c in key.Distinct())
        {
            if (!characterSet.Contains(c) && characterSet.Count < 36) 
            {
                matrix[index / 6, index % 6] = c;
                characterSet.Add(c);
                index++;
            }
        }
    }
    private string ProcessText(string input, bool encrypt)
    {
        StringBuilder output = new StringBuilder();
        for (int i = 0; i < input.Length; i += 2)
        {
            if (i + 1 == input.Length)
            {
                input += "x"; // Dodaj 'x' jeśli tekst ma nieparzystą długość
            }

            var (row1, col1, row2, col2) = FindPositions(input[i], input[i + 1]);

            if (row1 == row2)
            {
                // Te same wiersze
                col1 = encrypt ? (col1 + 1) % 6 : (col1 + 5) % 6;
                col2 = encrypt ? (col2 + 1) % 6 : (col2 + 5) % 6;
            }
            else if (col1 == col2)
            {
                // Te same kolumny
                row1 = encrypt ? (row1 + 1) % 6 : (row1 + 5) % 6;
                row2 = encrypt ? (row2 + 1) % 6 : (row2 + 5) % 6;
            }
            else
            {
                // Prostokąt
                int temp = col1;
                col1 = col2;
                col2 = temp;
            }

            output.Append(matrix[row1, col1]);
            output.Append(matrix[row2, col2]);
        }

        return output.ToString();
    }


    private static List<char> PrepareInput(string input, bool encrypt)
    {  
        return input.Replace(" ", "").ToLower().ToList();
    }

    private (int, int, int, int) FindPositions(char a, char b)
    {
        int row1 = 0, col1 = 0, row2 = 0, col2 = 0;

        for (int row = 0; row < 6; row++)
        {
            for (int col = 0; col < 6; col++)
            {
                if (matrix[row, col] == a)
                {
                    row1 = row;
                    col1 = col;
                }
                if (matrix[row, col] == b)
                {
                    row2 = row;
                    col2 = col;
                }
            }
        }

        return (row1, col1, row2, col2);
    }
}
